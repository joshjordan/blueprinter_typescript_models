# frozen_string_literal: true

require "fileutils"

module BlueprinterTypescriptModels
  class Generator
    class << self
      def generate_all(blueprints_path = nil)
        blueprints_path ||= File.join(Dir.pwd, "app/blueprints")
        output_dir = File.join(Dir.pwd, BlueprinterTypescriptModels.configuration.output_dir)

        FileUtils.mkdir_p(output_dir)

        Dir[File.join(blueprints_path, "**/*.rb")].each do |blueprint_file|
          generate_from_file(blueprint_file, output_dir)
        end
      end

      private

      def generate_from_file(blueprint_file, output_dir)
        require blueprint_file

        blueprint_class = File.basename(blueprint_file, ".rb")
                              .camelize
                              .constantize

        return unless blueprint_class < Blueprinter::Base

        interface_name = blueprint_class.name.demodulize.gsub("Blueprint", "")
        output_path = File.join(output_dir, "#{interface_name}.d.ts")

        content = generate_interface(interface_name, blueprint_class)
        File.write(output_path, content)
      end

      def generate_interface(interface_name, blueprint_class)
        fields = collect_fields(blueprint_class)
        associations = collect_associations(blueprint_class)

        [
          "// Generated by blueprinter_typescript_models",
          "// Do not edit this file directly",
          "",
          *generate_imports(associations),
          "",
          "export interface #{interface_name} {",
          *fields.map { |name, type| "  #{name}: #{type};" },
          *associations.map { |name, type| "  #{name}: #{type};" },
          "}",
          ""
        ].join("\n")
      end

      def collect_fields(blueprint_class)
        blueprint_class.reflections[:default].fields.transform_values do |field|
          TypeMapper.map_field(field.name, blueprint_class)
        end
      end

      def collect_associations(blueprint_class)
        blueprint_class.reflections[:default].associations.transform_values do |assoc|
          name = assoc.blueprint.name.demodulize.gsub("Blueprint", "")
          assoc.options[:blueprint_collection] ? "#{name}[]" : name
        end
      end

      def generate_imports(associations)
        return [] if associations.empty?

        associations.values.uniq.map do |type|
          base_type = type.gsub("[]", "")
          %(import type { #{base_type} } from "./#{base_type}";)
        end
      end
    end
  end
end
